public void makeMST() throws IOException {
		int[] inTree = new int[totClusters];
		double[] d = new double[totClusters];
		int[] whoTo = new int[totClusters]; 
		int[][] path = new int[2*(totClusters-1)][2];
		double[][] weight = new double[totClusters][totClusters];
		int[][] pathDistance = new int[totClusters][totClusters];
		
		String toVal = null;
		String minimum = null;
		int m = totClusters;
		
		for(int i=0;i<m;i++){
			for (int j=0; j<m; j++) {	
				weight[i][j] = treeCentroids.get(i).calCentroidDist(treeClusters.get(j).getCentroid());
				pathDistance[i][j] = totClusters;
			}
		}
		for (int i = 0; i < m; ++i){
			d[i] = Double.MAX_VALUE;
		}
		for (int i = 0; i < m; ++i){
			inTree[i] = 0;
		}
		inTree[0] = 1;
		FileWriter fstream = null;
		
		for (int i = 0; i < m; ++i){
			if ((weight[0][i] != 0) && (d[i] > weight[0][i])) {
				d[i] = weight[0][i];
				whoTo[i] = 0;
			}
		}
		
		String outlines = branchFilePath;
		fstream = new FileWriter(outlines);
		BufferedWriter out = new BufferedWriter(fstream);
		//write number of paths to the output file
		out.write(m-1 + "\n");
		
		for (int treeSize = 1; treeSize < m; ++treeSize) {
			// first find the node with the smallest distance within the tree
			int min = -1;
			for (int i = 0; i < m; ++i){
				if (inTree[i]==0){
					if ((min == -1) || (d[min] > d[i])){
						min = i;
					}
				}
			}
			//Add the node and its associated arc that is located in the whoTo array
			toVal = Integer.toString(whoTo[min]);
			minimum = Integer.toString(min);
			System.out.println("Adding edge " + toVal + "-" + minimum);
			out.write(toVal + " " + minimum + "\n");
			path[2*(treeSize-1)][0] = whoTo[min];
			path[2*(treeSize-1)][1] = min;
			path[2*(treeSize-1)+1][0] = min;
			path[2*(treeSize-1)+1][1] = whoTo[min];
			pathDistance[whoTo[min]][min]=pathDistance[min][whoTo[min]]=1;
			inTree[min] = 1;
			for (int i = 0; i < m; ++i){
				if ((weight[min][i] != 0) && (d[i] > weight[min][i])) {
					d[i] = weight[min][i];
					whoTo[i] = min;
				}
			}
		}
		setTreePath(path);
		distanceMatrix = pathDistance;
		out.close();	
	}
	
	
public void startAnalysis(double minDistance, double maxDistance) throws IOException {
		//set Starting centroid positions at random positions
		setInitialCentroids();

		int n = 0;
		//assign all DataPoints to clusters in an even fashion
		loop1: while (true) {
			for (int l = 0; l < clusters.size(); l++) 
			{
				clusters.get(l).addDataPoint(mapDataPoints.elementAt(n));
				n++;
				if (n >= mapDataPoints.size())
					break loop1;
			}
		}
		//recalculate Cluster centroids
		for (int i = 0; i < clusters.size(); i++) {
			clusters.get(i).getCentroid().calcCentroid();
		}

		//variable to keep track of how many cycles the algorithm has undergone

		boolean runMapping = true;
		//finds the movement of the centroids at each step and checks with cutoff before concluding
		while(runMapping ){
			double aveMoveLength = Double.MIN_VALUE;
			double prevMoveLength = Double.MAX_VALUE;
			int moves=0;
			while (Math.abs(prevMoveLength-aveMoveLength)>CUTOFF){
				prevMoveLength = aveMoveLength; 
				//store the clusters for the comparison at the end of the loop 
				ArrayList<Cluster> initClusters = new ArrayList<Cluster>();
				for(int f=0; f<clusters.size();f++){
					initClusters.add(new Cluster("InitCluster" + f));
					initClusters.get(f).setCentroid(clusters.get(f).getCentroid());
				}
				//run the Voronoi tesselation. This is done just like one step of the K-means algorithm 
				for (int j = 0; j < clusters.size(); j++) {
					for (int k = 0; k < clusters.get(j).getNumDataPoints(); k++) {
						//pick the first element of the first cluster
						//get the current Euclidean distance

						double tempEuDt = clusters.get(j).getDataPoint(k).getCurrentEuDt();
						Cluster tempCluster = null;
						boolean matchFoundFlag = false;
						for (int l = 0; l < clusters.size(); l++) {
							//test to see if testEuclidean < currentEuclidean for each data point
							//to determine if it needs to be moved to a different cluster
							double tempDist = clusters.get(j).getDataPoint(k).testEuclideanDistance(clusters.get(l).getCentroid());
							if (tempEuDt > tempDist){ 
								tempEuDt = tempDist;
								tempCluster = clusters.get(l);
								matchFoundFlag = true;
							}
						}
						//if the DataPoint was found to be closer than the cluster it is 
						//currently associated with, switch it to the nearer cluster
						if (matchFoundFlag) {
							tempCluster.addDataPoint(clusters.get(j).getDataPoint(k));
							clusters.get(j).removeDataPoint(clusters.get(j).getDataPoint(k));
						}
					}
				}
				//recalculate the centroid of each cluster to get its new position after the DataPoints have been moved
				for (int m = 0; m < clusters.size(); m++) {
					clusters.get(m).getCentroid().calcCentroid();
				}

				//Kernel smoothing step
				//first create a MST of all the centroids and create a distance matrix of their branch distances in map space
				ArrayList<Centroid> theCentroids = getCentroids();
				MST = new MinSpanTree(clusters.size(), theCentroids, clusters);
				MST.makeMST();
				MST.calcDistMatrix();
				//move centroids based on the monotomically decreasing neighborhood function
				recalcDataPts(moves+1);
				//find how much they moved from the previous iteration to determine if map has reached convergence
				for(int i=0; i<initClusters.size(); i++){
					aveMoveLength += initClusters.get(i).calcClusterChange(clusters.get(i));
				}
				aveMoveLength = aveMoveLength/clusters.size();
				//			System.out.println("Ave centroid move distance = " + aveMoveLength);
				//			System.out.println("Move Distance change= " + Math.abs((prevMoveLength-aveMoveLength)));
				moves++;
			}
			ArrayList<Centroid> theCentroids = getCentroids();
			MST = new MinSpanTree(theCentroids, clusters);
			MST.makeMSTNoWriting();
			MST.calcDistMatrix();
			System.out.println("Moves = " + moves);
			if(clusters.size()<mapDataPoints.size()){
				runMapping = addOrMergeClust(maxDistance, minDistance);
			}else{
				runMapping = false;
			}

			runMapping = false;
		}

	}
	
	
	private void recalcDataPts2(int iterNum) {
		Centroid[] centroidSet = new Centroid[clusters.size()];
		double[] centroidWt = new double[dimensions];
		ArrayList<ArrayList<Double>> centroidPos = new ArrayList<ArrayList<Double>>(clusters.size());
		double[] centroidX = new double[clusters.size()];
		ArrayList<double[]> centroidPositions = new ArrayList<double[]>();
		for(int m=0;m<clusters.size();m++){ 
			centroidSet[m]=clusters.get(m).getCentroid();
			centroidPos.add(centroidSet[m].getPosition());
		}
		//smoothing correction calculation
		for(int i=0;i<dimensions;i++){
			centroidPositions.add(calcCentroidWt(centroidPos, i, iterNum));
		}
		Centroid tempCentroid = null;
		//set the new centroid positions to the clusters
		for (int j = 0; j < clusters.size(); j++) {
			centroidWt = new double[clusters.size()];
			for(int i=0;i<dimensions; i++){
				centroidX = centroidPositions.get(i);
				centroidWt[j] = centroidX[j];
			}
			tempCentroid = new Centroid(centroidWt);
			clusters.get(j).setCentroid(tempCentroid);
			tempCentroid.setCluster(clusters.get(j));
		}

	}